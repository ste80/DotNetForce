@model ViewModel
@{
	Layout = null;
	var loginPath = Html.Raw("/services/oauth2/authorize" +
		"?response_type=" + Url.Encode("code") +
		"&redirect_uri=" + Url.Encode(Model.RedirectUri) +
		"&client_id=" + Url.Encode(Model.ClientId) +
		"&display=" + Url.Encode("popup") +
		"&state=");
}
<!DOCTYPE html>
<html lang="en">
<head>
<meta charset="utf-8">
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<meta name="viewport" content="width=device-width, initial-scale=1">
<title>DotNetForce</title>
<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/@('@')salesforce-ux/design-system@('@')2/assets/styles/salesforce-lightning-design-system.min.css"/>
</head>
<body>
<div id="app"></div>
<script src="https://cdn.jsdelivr.net/npm/react@('@')16/umd/react.production.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/react-dom@('@')16/umd/react-dom.production.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/redux@('@')4/dist/redux.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/react-redux@('@')5/dist/react-redux.min.js"></script>
<script>
function DotNetForceApp(state, action) {
	switch (action.type) {
		case 'LOGIN_DOMAIN':
			return Object.assign({}, state, {
				domain: action.domain
			});
		case 'LOGIN_OAUTH2':
			return Object.assign({}, state, {
				token: action.token
			});
		case 'UPDATE_SCHEMA':
			return Object.assign({}, state, {
				schema: action.schema
			});
		default:
			return state;
	}
}
function App(props) {
	return h('div', {'class': 'slds-p-around_large'}, 
	
	!props.token ? [
		h('button', {'class': 'slds-button slds-button_outline-brand', onClick: function() {
			var domain = 'login.salesforce.com';
			window.open('https://' + domain + '@(loginPath)' + encodeURIComponent('login.salesforce.com'),'dotnetforceOAuth2','width=600,height=700');
			props.dispatch({ type: 'LOGIN_DOMAIN', domain: domain });
		}}, 'Production'),
		h('button', {'class': 'slds-button slds-button_outline-brand', onClick: function() {
			var domain = 'test.salesforce.com';
			window.open('https://' + domain + '@(loginPath)','dotnetforceOAuth2','width=600,height=700');
			props.dispatch({ type: 'LOGIN_DOMAIN', domain: domain });
		}}, 'Test'),
		h('button', {'class': 'slds-button slds-button_outline-brand', onClick: function() {
			var input = prompt('?', '');
			if (!input) return;
			var domain = /\./.test(input) ? input : (input + '.my.salesforce.com');
			window.open('https://' + domain + '@(loginPath)','dotnetforceOAuth2','width=600,height=700');
			props.dispatch({ type: 'LOGIN_DOMAIN', domain: domain });
		}}, '?.my.salesforce.com'),
	] : [
		h('div', {'class': 'slds-page-header'},
			h('div', {'class': 'slds-page-header__row'},
				h('div', {'class': 'slds-page-header__col-title'},
					h('div', {'class': 'slds-media'},
						h('div', {'class': 'slds-media__body'},
							h('div', {'class': 'slds-page-header__name'},
								h('div', {'class': 'slds-page-header__name-title'},
									h('h1', null,
										h('span', {'class': 'slds-page-header__title slds-truncate', title: props.domain}, props.domain)
									)
								)
							)
						)
					)
				)
			)
		),
		props.schema ? h('textarea', {'class': 'slds-size_full',style: {height:'400px'}}, props.schema) : 'Loading schema...',
	]);
}
window.addEventListener('message', function(e){
	console.log(e.data);
	var m = /^DNF:https:\/\/ste80\.github\.io\/DotNetForce\/oauth2\?(.+)$/.exec(e.data);
	if (m && m[1]) {
		var params = {};
		var paramList = m[1].split('&');
		for (var p = 0; p < paramList.length; p++) {
			var keyVal = paramList[p].split('=');
			params[keyVal[0]] = decodeURIComponent(keyVal[1] || '');
		}
		store.dispatch({ type: 'LOGIN_OAUTH2', token: params.access_token });
		fetch(@Html.Raw(Json.Encode(Url.Action("Schema"))), {
			method:'post', 
			body: 'code=' + encodeURIComponent(params.access_token || '') +
			'&state=' + encodeURIComponent(params.state || ''),
			headers: {
				// "Content-Type": "application/json; charset=utf-8",
				"Content-Type": "application/x-www-form-urlencoded",
			}
		}).then(function(response) {
			response.text().then(function(schema) {
				store.dispatch({ type: 'UPDATE_SCHEMA', schema: schema });
			});
		});
	}
});
var h = React.createElement;
var store = Redux.createStore(DotNetForceApp, {
	domain: 'login.salesforce.com',
	token: null,
	schema: null,
});
var ConnectedApp = ReactRedux.connect(function(state) { return state; })(App);
ReactDOM.render(
	h(ReactRedux.Provider, { store: store },
		h(ConnectedApp)
	),
	document.getElementById('app')
);
</script>
</body>
</html>

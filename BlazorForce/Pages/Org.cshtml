@using DotNetForce;
@using Newtonsoft.Json;
@using Newtonsoft.Json.Linq;

<h1>@Setting</h1>

@if (!string.IsNullOrEmpty(Message))
{
<div class="alert alert-info" role="alert">
    @Message
</div>
}

@if (IsLoading)
{
    <hr class="my-4">
    <div class="progress">
        <div class="progress-bar progress-bar-striped progress-bar-animated" role="progressbar" aria-valuenow="100" aria-valuemin="0" aria-valuemax="100" style="width: 100%"></div>
    </div>
}
@if (Limits?["Licenses"] != null)
{
    <div class="card mb-4">
        <div class="card-header">Licenses</div>
        <div class="card-body">
            <div class="row">
            @foreach (var (license, i) in Limits?["Licenses"].Select((license, i) => (license, i)))
            {
                var total = (double)license["TotalLicenses"];
                var used = (double)license["UsedLicenses"];
                var percent = total == 0 ? 0 : Math.Round(100 * used / total, 1);
                var bg = percent > 90 ? "bg-danger" : percent > 50 ? "bg-warning" : "bg-success";
                <div class="col-sm-6 col-lg-4 col-xl-3">
                    <div>
                        <a href="@Setting.InstanceUrl/@license["Id"]" target="_blank">@license["Name"]</a>
                        ( @used / @total )
                    </div>
                    <div class="progress">
                        <div class="progress-bar @bg" role="progressbar" aria-valuenow="@percent" aria-valuemin="0" aria-valuemax="@total" style="width: @percent%">@percent%</div>
                    </div>
                </div>
            }
            </div>
        </div>
    </div>
}
@if (Limits?["Limits"] != null)
{
    <div class="card mb-4">
        <div class="card-header">API Limits</div>
        <div class="card-body">
            <div class="row">
            @foreach (var (apiName, i) in ((IDictionary<string, JToken>)Limits?["Limits"]).Keys.Select((apiName, i) => (apiName, i)))
            {
                var limit = Limits?["Limits"][apiName];
                var total = (double)limit["Max"];
                var used = total - (double)limit["Remaining"];
                var percent = total == 0 ? 0 : Math.Round(100 * used / total, 1);
                var bg = percent > 90 ? "bg-danger" : percent > 50 ? "bg-warning" : "bg-success";
                <div class="col-sm-6 col-lg-4 col-xl-3">
                    <div>@apiName ( @used / @total )</div>
                    <div class="progress">
                        <div class="progress-bar @bg" role="progressbar" aria-valuenow="@percent" aria-valuemin="0" aria-valuemax="@total" style="width: @percent%">@percent%</div>
                    </div>
                </div>
            }
            </div>
        </div>
    </div>
}

@functions
{
    [Parameter]
    private string InstanceUrl { get; set; }

    [Parameter]
    private AppStorageSetting Storage { get; set; }

    private JToken Limits { get; set; }

    private bool IsLoading { get; set; }

    private string Message { get; set; }

    private OrgSetting Setting { get; set; }

    private DNFClient Client { get; set;}

    protected override async Task OnInitAsync()
    {
        try
        {
            IsLoading = true;
            Message = $"Loading...";
            //Console.WriteLine(InstanceUrl);

            if (Storage.Data.Organizations.TryGetValue(InstanceUrl, out var orgSetting))
            {
                Setting = orgSetting;
                Client = new DNFClient(Setting.InstanceUrl, Setting.AccessToken, Setting.RefreshToken);
                try {
                    await OutputOrgLimits();
                }
                catch (Exception ex1)
                {
                    if (!string.IsNullOrEmpty(Client.RefreshToken))
                    {
                        try {
                            await Client.TokenRefreshAsync(new Uri(Setting.InstanceUrl), OAuthSetting.Default.ClientId);
                            Setting.AccessToken = Client.AccessToken;
                            await OutputOrgLimits();
                        }
                        catch (Exception ex2)
                        {
                            Message = ex2.ToString();
                        }
                    }
                    else
                    {
                        Message = ex1.ToString();
                    }
                }
            }
            else
            {
                Message = $"Failed to connected to {InstanceUrl}";
            }
            IsLoading = false;
        }
        catch (Exception ex)
        {
            IsLoading = false;
            Message = ex.ToString();
        }
    }

    private async Task OutputOrgLimits()
    {
        var request = new CompositeRequest();
        request.Query("license", @"SELECT Id, Name, TotalLicenses, UsedLicenses
FROM UserLicense");

        var (limitsResult, licensesResult) = (Client.LimitsAsync(), Client.Composite.PostAsync(request));
        Limits = JToken.FromObject(new
        {
            Limits = await limitsResult,
            Licenses = Client.GetEnumerable((await licensesResult).Queries("license"))
        });
        // Console.WriteLine(result.ToString());
        Message = "";
    }
}
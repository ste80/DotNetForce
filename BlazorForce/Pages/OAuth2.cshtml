@using DotNetForce;
@using Newtonsoft.Json;

<div class="jumbotron mt-3">
    <h1 class="display-4">DotNetForce</h1>
    <p class="lead">
        @Message
        <button type="button" class="close" data-dismiss="alert" aria-label="Close" onclick="@(async () => await CancelAsync())">
            <span aria-hidden="true">&times;</span> Cancel
        </button>
    </p>
    @if (IsLoading)
    {
        <hr class="my-4">
        <div class="progress">
            <div class="progress-bar progress-bar-striped progress-bar-animated" role="progressbar" aria-valuenow="100" aria-valuemin="0" aria-valuemax="100" style="width: 100%"></div>
        </div>
    }
</div>

@functions
{
[Parameter]
private string LoginDomain { get; set; }

[Parameter]
private string Code { get; set; }

[Parameter]
private AppStorage Storage { get; set; }

[Parameter]
private Action Reload { get; set; }

[Parameter]
private Func<Task> CancelAsync { get; set; }

private bool IsLoading { get; set; }

private string Message { get; set; }

protected override async Task OnInitAsync()
{
    try
    {
        IsLoading = true;
        Message = $"Connecting to {LoginDomain}...";
        var client = await DNFClient.OAuthLoginAsync(new OAuthProfile
        {
            ClientId = OAuthSetting.Default.ClientId,
            Code = Code,
            LoginUri = new Uri($"https://{LoginDomain}"),
            RedirectUri = OAuthSetting.Default.RedirectUri
        });
        if (!Storage.Data.Organizations.TryGetValue(client.InstanceUrl, out var orgSetting))
        {
            orgSetting = new OrgSetting();
            Storage.Data.Organizations.Add(client.InstanceUrl, orgSetting);
        }
        orgSetting.AccessToken = client.AccessToken;
        orgSetting.RefreshToken = client.RefreshToken;
        orgSetting.InstanceUrl = client.InstanceUrl;
        //Console.WriteLine(JsonConvert.SerializeObject(Storage.Data));
        await Storage.SaveChangeAsync();
        Message = "Login successfully, redirecting...";
        await JSRuntime.Current.InvokeAsync<object>("DNF.history.replaceState", null, null, $"#/org/{Uri.EscapeDataString(client.InstanceUrl)}");
        Reload();
    }
    catch (Exception ex)
    {
        IsLoading = false;
        Message = ex.ToString();
    }
}
}
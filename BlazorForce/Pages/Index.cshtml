@using DotNetForce;
@using Newtonsoft.Json;
@using Newtonsoft.Json.Linq;
@using System.Reactive;
@inject Microsoft.AspNetCore.Blazor.Services.IUriHelper UriHelper;
@page "/"

<div class="container-fluid">
    @if (!string.IsNullOrEmpty(Message))
    {
        <div class="alert alert-danger alert-dismissible fade show" role="alert">
          @Message
          <button type="button" class="close" data-dismiss="alert" aria-label="Close" onclick="@(() => Message = null)">
            <span aria-hidden="true">&times;</span>
          </button>
        </div>
    }
    @if (!string.IsNullOrEmpty(Code))
    {
        <nav aria-label="breadcrumb">
            <ol class="breadcrumb">
                <li class="breadcrumb-item"><a href="#" onclick="@(() => logout())">Home</a></li>
                <li class="breadcrumb-item active">@SelectedDomain</li>
            </ol>
        </nav>
        <div class="card">
            <div class="card-header">
                @SelectedDomain
            </div>
            <div class="card-body">
                Still under construction...
                @*
                @Code*@
            </div>
        </div>
    }
    else if (IsCustomDomain(Domain))
    {
        <nav aria-label="breadcrumb">
            <ol class="breadcrumb">
                <li class="breadcrumb-item"><a href="#" onclick="@(() => logout())">Home</a></li>
                <li class="breadcrumb-item active">Custom</li>
            </ol>
        </nav>
        <div class="card">
            <div class="card-header">
                Custom @(string.IsNullOrEmpty(SelectedDomain) ? "" : "(" + SelectedDomain + ")")
                <button type="button" class="close" aria-label="Close" onclick="@(() => logout())">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="card-body">
                <div class="form-group">
                    <input type="text" class="form-control" id="loggedInCustom" bind-value-oninput="@InputtedDomain" placeholder="?.my.salesfore.com" />
                </div>
                <div class="form-group">
                    <a href="@GetOauthHref(SelectedDomain)" class="btn btn-outline-primary btn-block">
                        <span class="oi oi-account-login"></span> Login
                    </a>
                </div>
            </div>
        </div>
    }
    else
    {
        <nav aria-label="breadcrumb">
            <ol class="breadcrumb">
                <li class="breadcrumb-item active"><a href="#">Home</a></li>
            </ol>
        </nav>
        <div class="p-3">
            <a class="btn btn-outline-primary btn-lg btn-block" href="@GetOauthHref("login.salesforce.com")">
                <span class="oi oi-account-login"></span> Production
            </a>
            <a class="btn btn-outline-primary btn-lg btn-block"  href="@GetOauthHref("test.salesforce.com")">
                <span class="oi oi-account-login"></span> Test
            </a>
            <button type="button" class="btn btn-outline-primary btn-lg btn-block" onclick="@(() => SelectDomain("?.my.salesforce.com"))">
                <span class="oi oi-account-login"></span> Custom
            </button>
        </div>
    }
</div>
@*<SurveyPrompt Title="How is Blazor working for you?" />*@

@functions
{
    private Dictionary<string, string> OAuth2 { get; set; }

    private string RedirectUri { get => "https://ste80.github.io/DotNetForce/oauth2"; }
    private string ClientId { get => "3MVG910YPh8zrcR3w3cOaVxURhJtcv8fxvL19jvXzqO_F819av8P2cc9VMnBOKkKTdK.uMAfUGRU_4aYDm5A3"; }

    private string LoginPath {
        get => "/services/oauth2/authorize" +
            "?response_type=" + Uri.EscapeDataString("code") +
            "&redirect_uri=" + Uri.EscapeDataString(RedirectUri) +
            "&client_id=" + Uri.EscapeDataString(ClientId) +
            "&display=" + Uri.EscapeDataString("popup") +
            "&state=";
    }

    private string Domain { get; set; }
    private string InputtedDomain { get; set; }
    private string Code { get; set; }
    private string Message { get; set; }

    private string SelectedDomain { get => !IsCustomDomain(Domain) ? Domain : InputtedDomain?.Contains('.') == true ? InputtedDomain : InputtedDomain + ".my.salesforce.com"; }

    protected override async Task OnInitAsync() {
        var url = UriHelper.GetAbsoluteUri();
        var hashSplit = url.Split(new [] { '#' }, 2);
        var hash = hashSplit.Length > 1 ? hashSplit[1] : "";
        OAuth2 = DecodeOAuth2(hash.StartsWith("/oauth2/") ? hash.Substring("/oauth2/".Length) : null);

        if (OAuth2 != null && OAuth2.ContainsKey("state") && OAuth2.ContainsKey("code")) {
            try {
                Domain = OAuth2["state"];
                Code = OAuth2["code"];
                
                DNFClient.Proxy = uri => new Uri(new Uri("https://dotnetforce.herokuapp.com"), uri.PathAndQuery);
                var client = await DNFClient.OAuthLoginAsync(new OAuthProfile {
                    ClientId = ClientId,
                    Code = Code,
                    LoginUri = new Uri("https://" + Domain),
                    RedirectUri = RedirectUri
                });
            }
            catch (Exception ex) {
                Message = ex.ToString();
                //OAuth2 = null;
                //Domain = null;
                //Code = null;
            }
        } else {
            OAuth2 = null;
            Domain = null;
            Code = null;
        }

        //await JSRuntime.Current.InvokeAsync<object>("jsInterop.addEventListener", "message", new DotNetObjectRef(new JsEventHandler((type, ev) => {
        //    switch (type) {
        //        case "message":
        //            if (!string.IsNullOrEmpty(Domain)) {
        //                var match = Regex.Match((string)ev?.data ?? "", @"^DNF:https://ste80\.github\.io/DotNetForce/oauth2\?(.+)$");

        //                if (match.Success && match.Groups.Count > 1) {
        //                    var dictParam = match.Groups[1].Value.Split('&').Select(val => val.Split('=')).ToDictionary(val => val[0], val => val.Length > 1 ? val[1] : "");

        //                    if (dictParam.TryGetValue("code", out var code)) {
        //                        Code = code;
        //                        Message = "Loading Schema...";
        //                    }
        //                }
        //            }
        //            break;
        //    }
        //    return null;
        //})));

        //await JSRuntime.Current.InvokeAsync<object>("jsInterop.waitForForSession", "oauth2", new SessionHandler(value => {
        //    if (!string.IsNullOrEmpty(Domain)) {
        //        var match = Regex.Match(value ?? "", @"^https://ste80\.github\.io/DotNetForce/oauth2\?(.+)$");

        //        if (match.Success && match.Groups.Count > 1) {
        //            var dictParam = match.Groups[1].Value.Split('&').Select(val => val.Split('=')).ToDictionary(val => val[0], val => val.Length > 1 ? val[1] : "");

        //            if (dictParam.TryGetValue("code", out var code)) {
        //                Code = code;
        //                Message = "Loading Schema...";
        //            }
        //        }
        //    }
        //    return null;
        //}));
    }

    private Dictionary<string, string> DecodeOAuth2(string oauth2) {
        if (oauth2 == null) return null;
        var oauth2Obj = oauth2.Split('&').Select(o => o.Split('=')).ToDictionary(o => Uri.UnescapeDataString(o[0]), o => o.Length > 1 ? Uri.UnescapeDataString(o[1]) : "");
        oauth2Obj.Remove("display");
        return oauth2Obj;
    }

    private string EncodeOAuth2(IDictionary<string, string> oauth2) {
        return string.Join("&", oauth2.Select(o => Uri.EscapeDataString(o.Key) + "=" + Uri.EscapeDataString(o.Value)));
    }

    //private async Task OpenAuthWindow(string domain)
    //{
    //    Domain = domain;
    //    InputtedDomain = null;
    //    await OpenAuthWindow();
    //}

    //private async Task OpenAuthWindow()
    //{
    //    await JSRuntime.Current.InvokeAsync<object>("jsInterop.openAuthWindow", "https://" + SelectedDomain + LoginPath + Uri.EscapeDataString(SelectedDomain));
    //}

    private void SelectDomain(string domain) {
        Domain = domain;
        InputtedDomain = null;
    }

    private string GetOauthHref(string domain) {
        return "https://" + domain + LoginPath + Uri.EscapeDataString(domain);
    }


    private bool IsCustomDomain(string domain) => !string.IsNullOrEmpty(domain) && domain != "login.salesforce.com" && domain != "test.salesforce.com";

    private void logout() {
        Domain = null;
        InputtedDomain = null;
        Code = null;
        Message = null;
    }
}
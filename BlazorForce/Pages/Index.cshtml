@using System.Text.RegularExpressions;
@page "/"
@page "/auth2/{Auth2QueryString}"

<div class="container-fluid">
    @if (!string.IsNullOrEmpty(Code))
    {
        <nav aria-label="breadcrumb">
            <ol class="breadcrumb">
                <li class="breadcrumb-item"><a href="#" onclick="@(() => logout())">DotNetForce</a></li>
                <li class="breadcrumb-item active">@SelectedDomain</li>
            </ol>
        </nav>
        <div class="card">
            <div class="card-header">
                @SelectedDomain
            </div>
            <div class="card-body">
                Loading... @Code
            </div>
        </div>
    }
    else if (IsCustomDomain(Domain))
    {
        <nav aria-label="breadcrumb">
            <ol class="breadcrumb">
                <li class="breadcrumb-item"><a href="#" onclick="@(() => logout())">DotNetForce</a></li>
                <li class="breadcrumb-item active">Custom</li>
            </ol>
        </nav>
        <div class="card">
            <div class="card-header">
                Custom @(string.IsNullOrEmpty(SelectedDomain) ? "" : "(" + SelectedDomain + ")")
                <button type="button" class="close" aria-label="Close" onclick="@(() => logout())">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="card-body">
                <div class="form-group">
                    <input type="text" class="form-control" id="loggedInCustom" bind-value-oninput="@InputtedDomain" placeholder="?.my.salesfore.com" />
                </div>
                <div class="form-group">
                    <a href="@("https://" + SelectedDomain + LoginPath + Uri.EscapeDataString(SelectedDomain))" class="btn btn-outline-primary btn-block">
                        <span class="oi oi-account-login"></span> Login
                    </a>
                </div>
            </div>
        </div>
    }
    else
    {
        <nav aria-label="breadcrumb">
            <ol class="breadcrumb">
                <li class="breadcrumb-item active"><a href="#">DotNetForce</a></li>
            </ol>
        </nav>
        <div class="p-3">
            <a class="btn btn-outline-primary btn-lg btn-block" href="@("https://" + "login.salesforce.com" + LoginPath + Uri.EscapeDataString("login.salesforce.com"))">
                <span class="oi oi-account-login"></span> Production
            </a>
            <a class="btn btn-outline-primary btn-lg btn-block"  href="@("https://" + "test.salesforce.com" + LoginPath + Uri.EscapeDataString("test.salesforce.com"))">
                <span class="oi oi-account-login"></span> Test
            </a>
            <button type="button" class="btn btn-outline-primary btn-lg btn-block" onclick="@(() => SelectDomain("?.my.salesforce.com"))">
                <span class="oi oi-account-login"></span> Custom
            </button>
        </div>
    }
    @Message
</div>
@*<SurveyPrompt Title="How is Blazor working for you?" />*@

@functions
{
    [Parameter]
    private string Auth2QueryString { get; set; }

    private string RedirectUri { get => "https://ste80.github.io/DotNetForce/oauth2"; }
    private string ClientId { get => "3MVG910YPh8zrcR3w3cOaVxURhJtcv8fxvL19jvXzqO_F819av8P2cc9VMnBOKkKTdK.uMAfUGRU_4aYDm5A3"; }

    private string LoginPath
    {
        get => "/services/oauth2/authorize" +
            "?response_type=" + Uri.EscapeDataString("code") +
            "&redirect_uri=" + Uri.EscapeDataString(RedirectUri) +
            "&client_id=" + Uri.EscapeDataString(ClientId) +
            "&display=" + Uri.EscapeDataString("popup") +
            "&state=";
    }

    private string Domain { get; set; }
    private string InputtedDomain { get; set; }
    private string Code { get; set; }
    private string Message { get; set; }

    private string SelectedDomain { get => !IsCustomDomain(Domain) ? Domain : InputtedDomain?.Contains('.') == true ? InputtedDomain : InputtedDomain + ".my.salesforce.com"; }

    private void SelectDomain(string domain)
    {
        Domain = domain;
        InputtedDomain = null;
    }

    protected override async Task OnInitAsync()
    {
        //await JSRuntime.Current.InvokeAsync<object>("jsInterop.addEventListener", "message", new DotNetObjectRef(new JsEventHandler((type, ev) =>
        //{
        //    switch (type)
        //    {
        //        case "message":
        //            if (!string.IsNullOrEmpty(Domain))
        //            {
        //                var match = Regex.Match((string)ev?.data ?? "", @"^DNF:https://ste80\.github\.io/DotNetForce/oauth2\?(.+)$");

        //                if (match.Success && match.Groups.Count > 1)
        //                {
        //                    var dictParam = match.Groups[1].Value.Split('&').Select(val => val.Split('=')).ToDictionary(val => val[0], val => val.Length > 1 ? val[1] : "");

        //                    if (dictParam.TryGetValue("code", out var code))
        //                    {
        //                        Code = code;
        //                        Message = "Loading Schema...";
        //                    }
        //                }
        //            }
        //            break;
        //    }
        //    return null;
        //})));

        //await JSRuntime.Current.InvokeAsync<object>("jsInterop.waitForForSession", "oauth2", new SessionHandler(value =>
        //{
        //    if (!string.IsNullOrEmpty(Domain))
        //    {
        //        var match = Regex.Match(value ?? "", @"^https://ste80\.github\.io/DotNetForce/oauth2\?(.+)$");

        //        if (match.Success && match.Groups.Count > 1)
        //        {
        //            var dictParam = match.Groups[1].Value.Split('&').Select(val => val.Split('=')).ToDictionary(val => val[0], val => val.Length > 1 ? val[1] : "");

        //            if (dictParam.TryGetValue("code", out var code))
        //            {
        //                Code = code;
        //                Message = "Loading Schema...";
        //            }
        //        }
        //    }
        //    return null;
        //}));
    }

    //private async Task OpenAuthWindow(string domain)
    //{
    //    Domain = domain;
    //    InputtedDomain = null;
    //    await OpenAuthWindow();
    //}

    //private async Task OpenAuthWindow()
    //{
    //    await JSRuntime.Current.InvokeAsync<object>("jsInterop.openAuthWindow", "https://" + SelectedDomain + LoginPath + Uri.EscapeDataString(SelectedDomain));
    //}


    private bool IsCustomDomain(string domain) => !string.IsNullOrEmpty(domain) && domain != "login.salesforce.com" && domain != "test.salesforce.com";

    private void logout()
    {
        Domain = null;
        InputtedDomain = null;
        Code = null;
        Message = null;
    }
}
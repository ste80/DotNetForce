@using DotNetForce;
@using LZStringCSharp;
@inject Microsoft.AspNetCore.Blazor.Services.IUriHelper UriHelper;
@page "/"

<div class="container-fluid">
    @if (Hash == null)
    {
        <div class="jumbotron mt-3">
            <h1 class="display-4">DotNetForce</h1>
            <p class="lead">Loading...</p>
            <hr class="my-4">
            <div class="progress">
                <div class="progress-bar progress-bar-striped progress-bar-animated" role="progressbar" aria-valuenow="100" aria-valuemin="0" aria-valuemax="100" style="width: 100%"></div>
            </div>
        </div>
    }
    else
    {
        if (Hash.StartsWith("/oauth2/"))
        {
            var oauth2 = UriHelper.GetHashAsDictionary("/oauth2/");
            <OAuth2 Code="@oauth2["code"]" LoginDomain="@oauth2["state"]" Storage="@Storage" ParentStateHasChanged="@(() => StateHasChanged())" Cancel="@Cancel"></OAuth2>
        }
        else if (Hash.StartsWith("/org/"))
        {
            var org = Uri.UnescapeDataString(Hash.Substring("/org/".Length));
            <Org InstanceUrl="@org" Storage="@Storage"></Org>
        }
        else if (Hash.StartsWith("/DataImport/"))
        {
            <text>Under construction...</text>
        }
        else if (Hash.StartsWith("/DataExport/"))
        {
            <text>Under construction...</text>
        }
        else {
            <Login Storage="@Storage"></Login>
        }
    }
</div>
@*<SurveyPrompt Title="How is Blazor working for you?" />*@

@functions
{
    private AppStorage Storage { get; set; }
    private string Url { get; set; }
    private string Hash { get; set; }

    protected override async Task OnInitAsync()
    {
        Storage = await AppStorage.GetAsync();
        Url = UriHelper.GetAbsoluteUri();
        Hash = UriHelper.GetHash() ?? "";
        UriHelper.OnLocationChanged += OnLocationChanged;
    }

    private void OnLocationChanged(object sender, string newUriAbsolute)
    {
        Url = newUriAbsolute;
        Hash = UriHelper.GetHash() ?? "";
        StateHasChanged();
        Console.WriteLine($"Url: {Url}");
    }

    private void Cancel()
    {
        Hash = "";
        StateHasChanged();
    }

    public void Dispose()
    {
        UriHelper.OnLocationChanged -= OnLocationChanged;
    }
}
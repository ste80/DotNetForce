<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ assembly name="$(ProjectDir)DotNetForce.dll" #>
<#@ assembly name="$(ProjectDir)netstandard.dll" #>
<#@ assembly name="$(ProjectDir)Newtonsoft.Json.dll" #>
<#@ assembly name="$(ProjectDir)System.Reactive.dll" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="DotNetForce" #>
<#@ import namespace="Newtonsoft.Json" #>
<#@ import namespace="Newtonsoft.Json.Linq" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Diagnostics" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Threading" #>
<#@ import namespace="System.Threading.Tasks" #>
<#@ output extension="cs" #>
<#
	System.Net.ServicePointManager.DefaultConnectionLimit = int.MaxValue;
	System.Net.ServicePointManager.Expect100Continue = true;
	System.Net.ServicePointManager.SecurityProtocol = System.Net.SecurityProtocolType.Tls12;
	RunTransformAsync().Wait();
#>
<#+
async Task RunTransformAsync() {
	var output = new StringBuilder();
	try {
		Warning(Host.ResolvePath(".."));
		var instanceName = Path.GetFileNameWithoutExtension(Host.TemplateFile);
		var projectDir = Path.GetDirectoryName(Host.TemplateFile);
		var solutionDir = Path.GetDirectoryName(projectDir);
		var devDir = Path.GetDirectoryName(solutionDir);

		var generator = new SchemaGenerator(GenerationEnvironment);
		var devProfileFile = Path.Combine(devDir, "LoginProfiles.json");
		var loginProfile = ReadProfile(devProfileFile)?[instanceName] ?? JToken.FromObject(new Dictionary<string, JToken>
{
	["LoginUrl"] = "https://test.salesforce.com/services/oauth2/token",
	["ClientId"] = "{your_app_client_id}",
	["ClientSecret"] = "{your_app_client_secret}",
	["RedirectUri"] = "{your_app_redirect_uri_for_server_flow_only}",
	["UserName"] = "{your_user_name_for_password_flow_only}",
	["Password"] = "{your_password_for_password_flow_only}"
});
		var loginUri = new Uri(loginProfile["LoginUrl"]?.ToString() ?? throw new Exception("LoginUrl is null."));
		var clientId = loginProfile["ClientId"]?.ToString() ?? throw new Exception("ClientId is null.");
		var clientSecret = loginProfile["ClientSecret"]?.ToString() ?? throw new Exception("ClientSecret is null.");
		var userName = loginProfile["UserName"]?.ToString() ?? throw new Exception("UserName is null.");
		var password = loginProfile["Password"]?.ToString() ?? throw new Exception("Password is null.");

		var objNamespace = "DotNetForce.Schema";
		var client = await DNFClient.LoginAsync(loginUri, clientId, clientSecret, userName, password, msg => Warning(msg)).ConfigureAwait(false);

		await generator.GenerateAsync(client, objNamespace).ConfigureAwait(false);
	} finally {
		Warning(output.ToString());
	}
}
#>
<#+
public JToken ReadProfile(string path)
{
    try
    {
        if (File.Exists(path))
        {
            using (var stream = new FileStream(path, FileMode.Open, FileAccess.Read, FileShare.ReadWrite))
            {
                using (var reader = new StreamReader(stream))
                {
                    using (var jsonReader = new JsonTextReader(reader))
                    {
                        return new JsonSerializer().Deserialize<JToken>(jsonReader);
                    }
                }
            }
        }
    }
    catch { }
    return null;
}
#>
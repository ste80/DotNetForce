<#+
async Task WriteSchemaAsync(string instanceName, JObject objects, SfModelGenerator generator)
{
#>using DotNetForce;
using DotNetForce.Schema;
using Newtonsoft.Json;
using Newtonsoft.Json.Linq;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Linq.Expressions;
using System.Threading.Tasks;

namespace DotNetForce.Schema.<#= instanceName #>
{
	public class Schema
	{
		private static Schema _Instance { get; set; }
		public static Schema Instance
        {
            get
            {
                if (_Instance == null)
                {
                    _Instance = new Schema();
                }
                return _Instance;
            }
        }
        public static T Of<T>(Func<Schema, T> func) => func(Instance);
        public static void Of<T>(Func<Schema, T> func, Action<T> action) => action(func(Instance));
        public static TOut Of<T, TOut>(Func<Schema, T> func, Func<T, TOut> getter) => getter(func(Instance));
        public static JObjectWrapper Wrap(JObject obj) => (JObjectWrapper)obj;
        public static IEnumerable<JObjectWrapper> Wrap(IEnumerable<JObject> objs) => objs?.Select(o => new JObjectWrapper(o));
        public static async Task<IEnumerable<JObjectWrapper>> Wrap(Task<IEnumerable<JObject>> objs) => (await objs)?.Select(o => new JObjectWrapper(o));

<#+
		foreach (var prop in objects.Properties())
		{
			var objName = prop.Name;
#>
		public Sf<#= objName #> <#= objName #> { get => new Sf<#= objName #>(); }
<#+
		}
#>
	}
}
<#+
		await generator.GenerateFileAsync("Schema.cs").ConfigureAwait(false);
	}
#>
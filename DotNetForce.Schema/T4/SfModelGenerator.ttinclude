<#+
public class SfModelGenerator
{
    public string ProjectDir { get; set; }
    public string InstanceName { get; set; }
    public StringBuilder GenerationEnvironment { get; set; }
    public Action<string> Logger { get; set; }
    public Action<string> ErrorLogger { get; set; }

    public SfModelGenerator(string projectDir, string instanceName, StringBuilder generationEnvironment, Action<string> logger, Action<string> errorLogger)
    {
        ProjectDir = projectDir;
        InstanceName = instanceName;
        GenerationEnvironment = generationEnvironment;
        Logger = logger;
        ErrorLogger = errorLogger;
    }

    public JObject ReadProfile(string path)
    {
        try
        {
            if (File.Exists(path))
            {
                using (var stream = new FileStream(path, FileMode.Open, FileAccess.Read, FileShare.ReadWrite))
                {
                    using (var reader = new StreamReader(stream))
                    {
                        using (var jsonReader = new JsonTextReader(reader))
                        {
                            return new JsonSerializer().Deserialize<JObject>(jsonReader);
                        }
                    }
                }
            }
        }
        catch { }
        return null;
    }

    public async Task<JObject> GenerateAsync(
        Uri loginUri,
        string clientId,
        string clientSecret,
        string userName,
        string password)
    {
        var folder = Path.Combine(ProjectDir, InstanceName);
        var solutionDir = Path.GetDirectoryName(ProjectDir);
        var namespacePrefix = $"DotNetForce.{InstanceName}";

        Logger?.Invoke($"instance: {InstanceName}");
        Logger?.Invoke($"projectDir: {ProjectDir}");
        Logger?.Invoke($"solutionDir: {solutionDir}");
        Logger?.Invoke($"folder: {folder}");
        Logger?.Invoke($"namespacePrefix: {namespacePrefix}");

        if (!Directory.Exists(folder)) Directory.CreateDirectory(folder);
        foreach (var dir in Directory.GetDirectories(folder, "*", SearchOption.TopDirectoryOnly))
        {
            Directory.Delete(dir, true);
        }
        foreach (var file in Directory.GetFiles(folder, "*", SearchOption.TopDirectoryOnly))
        {
            File.Delete(file);
        }

        var client = await DNFClient.LoginAsync(loginUri, clientId, clientSecret, userName, password, Logger).ConfigureAwait(false);
        var describeGlobalResult = await client.GetObjectsAsync<JObject>().ConfigureAwait(false);

        var request = new CompositeRequest();
        foreach (var sobject in describeGlobalResult.SObjects)
        {
            var objectName = sobject["name"]?.ToString();
            if ((bool?)sobject["deprecatedAndHidden"] == true)
            {
                continue;
            }
            Logger?.Invoke(objectName);
            request.Describe(objectName, objectName);
        }

        var describeResult = await client.Composite.PostAsync(request).ConfigureAwait(false);

        foreach (var error in describeResult.Errors())
        {
            Logger?.Invoke($"{error.Key}\n{error.Value}");
        }

        var objects = JObject.FromObject(describeResult.Results());
        return objects;
    }

    public async Task GenerateFileAsync(string filePath)
    {
        var path = Path.Combine(ProjectDir, InstanceName, filePath);
        Directory.CreateDirectory(Directory.GetParent(path).FullName);
        Logger?.Invoke($"Writing to {path}.");
        using (var stream = File.Open(path, FileMode.Create, FileAccess.Write, FileShare.Read))
        {
            using (var writer = new StreamWriter(stream))
            {
                await writer.WriteAsync(GenerationEnvironment.ToString()).ConfigureAwait(false);
            }
        }
        GenerationEnvironment.Clear();
    }
}
#>